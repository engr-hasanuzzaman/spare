# -*- coding: utf-8 -*-
# Generated by Django 1.11.22 on 2019-10-18 06:30
from __future__ import unicode_literals

import django.contrib.postgres.fields.jsonb
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import donations.models
import enumfields.fields
from django.utils.crypto import get_random_string
import rules.contrib.models


class Migration(migrations.Migration):

    dependencies = [
        ('donations', '0027_location_org_required'),
    ]

    operations = [
        migrations.CreateModel(
            name='AppointmentTime',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', enumfields.fields.EnumField(default='r', enum=donations.models.ScheduleType, max_length=1)),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('cancelled', models.BooleanField(default=False)),
                ('day_of_week', enumfields.fields.EnumIntegerField(default=6, enum=donations.models.DaysOfWeek)),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='appointment_times', to='donations.Location')),
            ],
            options={
                'abstract': False,
            },
            bases=(rules.contrib.models.RulesModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Appointment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now=True)),
                ('quantity', models.PositiveIntegerField(default=1)),
                ('date', models.DateField()),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('cancelled', models.BooleanField(default=False)),
                ('accepted_terms', models.BooleanField(default=False)),
                ('accepted_terms_date', models.DateTimeField(auto_now=True)),
                ('appointment_time', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='appointments', to='donations.AppointmentTime')),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='appointments', to='donations.Location')),
            ],
            options={
                'abstract': False,
            },
            bases=(rules.contrib.models.RulesModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='FulfillmentItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(default=1)),
                ('appointment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fulfillment_items', to='donations.Appointment')),
            ],
            bases=(rules.contrib.models.RulesModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ItemType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_order', models.PositiveIntegerField(db_index=True, editable=False)),
                ('display_name', models.CharField(max_length=64)),
                ('slug', models.SlugField(max_length=32, unique=True, null=True)),
                ('image', models.ImageField(validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf'])])),
                ('verbose_name', models.CharField(max_length=64)),
                ('plural_pronoun', models.BooleanField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RequestItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(default=1)),
            ],
            options={
                'abstract': False,
            },
            bases=(rules.contrib.models.RulesModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='SizeChoice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('choice_data', django.contrib.postgres.fields.jsonb.JSONField()),
                ('category', enumfields.fields.EnumField(blank=True, enum=donations.models.SizeCategory, max_length=32)),
            ],
        ),
        migrations.RemoveField(
            model_name='donationfulfillment',
            name='dropoff_time',
        ),
        migrations.RemoveField(
            model_name='donationfulfillment',
            name='manual_dropoff_date',
        ),
        migrations.RemoveField(
            model_name='donationfulfillment',
            name='request',
        ),
        migrations.RenameField(
            model_name='donationrequest',
            old_name='accepted',
            new_name='accepted_terms',
        ),
        migrations.RemoveField(
            model_name='donationrequest',
            name='code',
        ),
        migrations.RemoveField(
            model_name='donationrequest',
            name='item',
        ),
        migrations.AddField(
            model_name='category',
            name='slug',
            field=models.SlugField(max_length=32, unique=True, null=True),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='donationrequest',
            name='accepted_terms_date',
            field=models.DateTimeField(auto_now=True),
        ),
        migrations.AlterField(
            model_name='category',
            name='display_name',
            field=models.CharField(max_length=64),
        ),
        migrations.AlterField(
            model_name='donationrequest',
            name='neighborhood',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='donations.Neighborhood'),
        ),
        migrations.DeleteModel(
            name='DonationFulfillment',
        ),
        migrations.AddField(
            model_name='requestitem',
            name='request',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='request_items', to='donations.DonationRequest'),
        ),
        migrations.AddField(
            model_name='requestitem',
            name='type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='request_items', to='donations.ItemType'),
        ),
        migrations.AddField(
            model_name='itemtype',
            name='category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='item_types', to='donations.Category'),
        ),
        migrations.AddField(
            model_name='itemtype',
            name='size_choices',
            field=models.ManyToManyField(related_name='item_types', to='donations.SizeChoice'),
        ),
        migrations.AddField(
            model_name='fulfillmentitem',
            name='request_item',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='fulfillment_items', to='donations.RequestItem'),
        ),
        migrations.AddField(
            model_name='appointment',
            name='request',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fulfillments', to='donations.DonationRequest'),
        ),
        migrations.AddField(
            model_name='appointment',
            name='request_items',
            field=models.ManyToManyField(related_name='appointments', to='donations.RequestItem'),
        ),
        migrations.AddField(
            model_name='donationrequest',
            name='valid_appointment_times',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='donations.AppointmentTime'),
        ),
        migrations.AlterUniqueTogether(
            name='fulfillmentitem',
            unique_together=set([('request_item', 'appointment')]),
        ),
    ]
